"""
ASCII Comment‚ÄëBanner Generator (Gradio)

Features
--------
- Choose comment style (full list from the supplied table)
- Set total width (characters)
- Set total height (lines) ‚Üí padding above / below the text
- Align the inner text: left / centre / right
- Returns a ready‚Äëto‚Äëpaste multi‚Äëline comment banner.
"""

import gradio as gr

# ----------------------------------------------------------------------
# 1Ô∏è‚É£  Mapping from UI‚Äëfriendly names ‚Üí (start_delim, end_delim)
# ----------------------------------------------------------------------
COMMENT_STYLES: dict[str, tuple[str, str]] = {
    # ----- single‚Äëline comment families ---------------------------------
    "# (sh, Python, Ruby, etc.)":                 ("#", "#"),
    "// (C‚Äëfamily, JavaScript, Go, Rust‚Ä¶)":      ("//", "//"),
    "; (MASM/TASM, Lisp families)":               (";", ";"),
    "-- (SQL, Haskell, Ada, VHDL‚Ä¶)":              ("--", "--"),
    "% (MATLAB/Octave, LaTeX)":                   ("%", "%"),
    "' (VB, VBA, VB.NET)":                       ("'", "'"),
    "` (legacy shell)":                           ("`", "`"),
    "REM (Batch files)":                         ("REM", "REM"),
    ":: (Batch hack, works in PowerShell)":      ("::", "::"),
    ";; (Racket, Scheme, Clojure read‚Äëtime comment)": (";;", ";;"),

    # ----- block‚Äëonly comment families ---------------------------------
    "<!-- ‚Ä¶ --> (HTML / XML)":                   ("<!--", "-->"),
    "/* ‚Ä¶ */ (C‚Äëstyle block)":                   ("/*", "*/"),
    "\"\"\" ‚Ä¶ \"\"\" (Python doc‚Äëstring, Elixir multi‚Äëline string)": ('"""', '"""'),
    "--[[ ‚Ä¶ ]]" + " (Lua block comment)":        ("--[[", "]]"),
    "#= ‚Ä¶ =# (Julia block comment)":             ("#=", "=#"),
    "#| ‚Ä¶ |# (Clojure / CLisp / Racket block)": ("#|", "|#"),
    "<# ‚Ä¶ #> (PowerShell block comment)":        ("<#", "#>"),
    "=begin ‚Ä¶ =end (Ruby block comment)":        ("=begin", "=end"),

    # ----- languages that have both line‚Äë and block‚Äëstyles -------------
    "# (Python line comment)":                   ("#", "#"),
    "\"\"\" (Python triple‚Äëquote doc‚Äëstring)":   ('"""', '"""'),
    "# (Ruby line comment)":                     ("#", "#"),
    "=begin/=end (Ruby block comment)":          ("=begin", "=end"),
    "REM (PowerShell line comment)":             ("#", "#"),
    "<# ‚Ä¶ #> (PowerShell block comment)":        ("<#", "#>"),

    # ----- extra / special cases ---------------------------------------
    "' (SQL single‚Äëquote comment ‚Äì rarely used)": ("'", "'"),
    "-- (Ada line comment)":                     ("--", "--"),
    "-- (COBOL comment ‚Äì column 7)":             ("--", "--"),
    "` (Tcl comment ‚Äì hash is normal, back‚Äëtick rarely)": ("`", "`"),
    "/* ‚Ä¶ */ (CSS / Less / Sass SCSS)":          ("/*", "*/"),
    "/* ‚Ä¶ */ (GraphQL SDL ‚Äì same as C‚Äëstyle)":   ("/*", "*/"),
    "# (PowerShell line comment ‚Äì alias for '--')": ("#", "#"),
    "# (R doc comment ‚Äì same as Python)":        ("#", "#"),
    "# (Julia line comment)":                    ("#", "#"),
    "# (Nim line comment)":                     ("#", "#"),
    "# (Haxe line comment)":                    ("#", "#"),
    "# (Crystal line comment)":                  ("#", "#"),
    "# (F# line comment)":                       ("#", "#"),
    "# (D line comment)":                        ("#", "#"),
    "# (Go line comment)":                       ("#", "#"),
    "# (Kotlin line comment)":                   ("#", "#"),
    "# (Swift line comment)":                    ("#", "#"),
    "# (Rust line comment)":                     ("#", "#"),
    "# (Dart line comment)":                     ("#", "#"),
    "# (Scala line comment)":                    ("#", "#"),
    "# (Groovy line comment)":                   ("#", "#"),
    "# (Clojure line comment)":                  ("#", "#"),
    "# (Julia line comment)":                    ("#", "#"),
    "# (Racket line comment)":                   ("#", "#"),
    "# (Elixir line comment)":                   ("#", "#"),

    # ----- more block‚Äëstyle families (HTML‚Äëlike) -----------------------
    "<!-- ‚Ä¶ --> (Markdown ‚Äì HTML comment inside MD)": ("<!--", "-->"),
    "<!-- ‚Ä¶ --> (Asciidoc comment)":                ("<!--", "-->"),

    # You can keep adding entries here as you discover new syntaxes.
}

# ----------------------------------------------------------------------
# 2Ô∏è‚É£  Helper ‚Äì build the banner
# ----------------------------------------------------------------------
def make_banner(
    text: str,
    width: int = 80,
    height: int = 5,
    align: str = "both",
    style: str = "# (sh, Python, Ruby, etc.)",
) -> str:
    """
    Build a comment banner according to the requested options.

    Parameters
    ----------
    text : str
        Caption that will appear inside the banner.
    width : int
        Desired total line width (including comment delimiters). Must be ‚â• 20.
    height : int
        Desired total line count (‚â• 3). Extra lines become empty padding.
    align : {"left", "both", "right"}
        Horizontal alignment of the caption.
    style : str
        Human‚Äëreadable comment style name ‚Äì must exist in ``COMMENT_STYLES``.

    Returns
    -------
    str
        Multi‚Äëline string containing the banner (including newline characters).
    """
    # ------------------------------------------------------------------
    # 1Ô∏è‚É£ Resolve comment delimiters
    # ------------------------------------------------------------------
    try:
        start, end = COMMENT_STYLES[style]
    except KeyError as exc:
        raise ValueError(f"Unsupported comment style: {style!r}") from exc

    # ------------------------------------------------------------------
    # 2Ô∏è‚É£ Compute usable width (space for dashes / text)
    # ------------------------------------------------------------------
    # Every line looks like: <start>‚ê£<content>‚ê£<end>
    usable = width - (len(start) + len(end) + 4)   # 4 = two spaces + two delimiters
    if usable < 1:                               # safety ‚Äì expand if needed
        usable = 1
        width = len(start) + len(end) + 5

    # ------------------------------------------------------------------
    # 3Ô∏è‚É£ Build the three basic line types
    # ------------------------------------------------------------------
    border_line = f"{start} " + ("-" * usable) + f" {end}"

    if align == "left":
        inner = text.ljust(usable)
    elif align == "right":
        inner = text.rjust(usable)
    else:                     # centre (default)
        inner = text.center(usable)

    text_line  = f"{start} " + inner + f" {end}"
    empty_line = f"{start} " + (" " * usable) + f" {end}"

    # ------------------------------------------------------------------
    # 4Ô∏è‚É£ Vertical padding (height)
    # ------------------------------------------------------------------
    if height < 3:
        height = 3
    pad_total = height - 3               # lines that are not border / text
    pad_top   = pad_total // 2
    pad_bottom = pad_total - pad_top

    # ------------------------------------------------------------------
    # 5Ô∏è‚É£ Assemble everything
    # ------------------------------------------------------------------
    lines = [border_line]
    lines += [empty_line] * pad_top
    lines.append(text_line)
    lines += [empty_line] * pad_bottom
    lines.append(border_line)

    return "\n".join(lines)


# ----------------------------------------------------------------------
# 3Ô∏è‚É£  Gradio UI definition ‚Äì offers every style from the table
# ----------------------------------------------------------------------
demo = gr.Interface(
    fn=make_banner,
    inputs=[
        gr.Textbox(
            label="Banner text",
            placeholder="Enter your caption here‚Ä¶",
            lines=1,
        ),
        gr.Slider(
            minimum=20,
            maximum=200,
            step=2,
            value=80,
            label="Total width (characters)",
        ),
        gr.Slider(
            minimum=3,
            maximum=30,
            step=1,
            value=5,
            label="Total height (lines)",
        ),
        gr.Dropdown(
            choices=["left", "both", "right"],
            value="both",
            label="Text alignment",
        ),
        gr.Dropdown(
            choices=sorted(COMMENT_STYLES.keys()),
            value="# (sh, Python, Ruby, etc.)",
            label="Comment style",
        ),
    ],
    outputs=gr.Textbox(
        label="Generated ASCII banner",
        lines=12,
        interactive=False,
    ),
    title="üñºÔ∏è ASCII Comment‚ÄëBanner Generator",
    description=(
        "Create ready‚Äëto‚Äëpaste comment blocks for dozens of programming languages. "
        "Pick the width, height, alignment, and any comment style from the full list."
    ),
    examples=[
        [
            "DATA & TRAINING CONFIGURATION PROCESSING",
            80,
            5,
            "both",
            "# (sh, Python, Ruby, etc.)",
        ],
        [
            "WELCOME TO MY PROJECT",
            60,
            7,
            "left",
            "// (C‚Äëfamily, JavaScript, Go, Rust‚Ä¶)",
        ],
        [
            "‚ö°Ô∏è QUICK START",
            70,
            4,
            "right",
            "/* ‚Ä¶ */ (C‚Äëstyle block)",
        ],
        [
            "HTML HEADER",
            70,
            5,
            "both",
            "<!-- ‚Ä¶ --> (HTML / XML)",
        ],
        [
            "POWER‚ÄëSHELL MODULE",
            70,
            5,
            "both",
            "<# ‚Ä¶ #> (PowerShell block comment)",
        ],
        [
            "RUBY BLOCK DOC",
            70,
            5,
            "both",
            "=begin ‚Ä¶ =end (Ruby block comment)",
        ],
    ],
    allow_flagging="never",
)

if __name__ == "__main__":
    demo.launch()
